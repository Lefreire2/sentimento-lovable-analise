
export async function analyzeUniqueLeads(supabase: any, basicTableName: string): Promise<number> {
  console.log('üìä Analisando leads √∫nicos por remoteJid para:', basicTableName);
  
  try {
    // Primeiro, vamos pegar uma amostra para entender o formato dos dados
    const { data: sampleData, error: sampleError } = await supabase
      .from(basicTableName)
      .select('remoteJid')
      .limit(10);

    if (sampleError) {
      console.error('Erro ao buscar amostra:', sampleError);
      return 0;
    }

    console.log('üìä Amostra de dados:', sampleData?.slice(0, 3));

    // Buscar TODOS os remoteJid sem limite para capturar a base completa
    const { data: allData, error } = await supabase
      .from(basicTableName)
      .select('remoteJid');

    if (error) {
      console.error('Erro ao buscar remoteJids:', error);
      return 0;
    }

    console.log('üìä Total de registros encontrados na tabela:', allData?.length);

    // Filtrar e contar remoteJids √∫nicos v√°lidos
    const uniqueJids = new Set();
    let validCount = 0;
    let invalidCount = 0;
    
    allData?.forEach(row => {
      const jid = row.remoteJid;
      
      // Verificar se o JID √© v√°lido
      if (jid && 
          typeof jid === 'string' && 
          jid.trim() !== '' && 
          jid !== 'undefined' && 
          jid !== 'null' &&
          jid.toLowerCase() !== 'null') {
        
        // Limpar e normalizar o JID
        const cleanJid = jid.trim().toLowerCase();
        
        // Verificar formato v√°lido: deve conter @ (WhatsApp) ou ser apenas n√∫meros
        if (cleanJid.includes('@') || /^\d{10,15}$/.test(cleanJid)) {
          uniqueJids.add(cleanJid);
          validCount++;
        } else {
          invalidCount++;
        }
      } else {
        invalidCount++;
      }
    });

    console.log('üìä Estat√≠sticas detalhadas de an√°lise:');
    console.log('  - Tabela analisada:', basicTableName);
    console.log('  - Total de registros na tabela:', allData?.length);
    console.log('  - JIDs v√°lidos encontrados:', validCount);
    console.log('  - JIDs inv√°lidos/nulos:', invalidCount);
    console.log('  - Leads √∫nicos identificados:', uniqueJids.size);
    console.log('üìä Primeiros 5 JIDs √∫nicos:', Array.from(uniqueJids).slice(0, 5));
    
    // Garantir que retornamos o n√∫mero correto de leads √∫nicos
    const finalUniqueLeads = uniqueJids.size;
    console.log('‚úÖ RESULTADO FINAL - Leads √∫nicos confirmados:', finalUniqueLeads);
    
    return finalUniqueLeads;
  } catch (error) {
    console.error('Erro na an√°lise de leads √∫nicos:', error);
    return 0;
  }
}
