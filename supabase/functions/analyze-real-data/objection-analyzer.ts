
import { ObjectionData } from './types.ts';

export function analyzeCategoryDistribution(data: ObjectionData[]): Record<string, number> {
  const distribution: Record<string, number> = {};
  data.forEach(obj => {
    distribution[obj.objection_category] = (distribution[obj.objection_category] || 0) + 1;
  });
  return distribution;
}

export function analyzeFunnelStageDistribution(data: ObjectionData[]): Record<string, number> {
  const distribution: Record<string, number> = {};
  data.forEach(obj => {
    distribution[obj.funnel_stage] = (distribution[obj.funnel_stage] || 0) + 1;
  });
  return distribution;
}

export function analyzeIntensityDistribution(data: ObjectionData[]): Record<string, number> {
  const distribution: Record<string, number> = {};
  data.forEach(obj => {
    distribution[obj.intensity_level] = (distribution[obj.intensity_level] || 0) + 1;
  });
  return distribution;
}

export function analyzeConversionImpact(data: ObjectionData[]) {
  const converted = data.filter(obj => obj.conversion_impact === true).length;
  const notConverted = data.filter(obj => obj.conversion_impact === false).length;
  const total = converted + notConverted;
  
  return {
    converted_after_objection: converted,
    not_converted: notConverted,
    conversion_rate: total > 0 ? ((converted / total) * 100).toFixed(1) + '%' : '0%'
  };
}

export function analyzeScriptEffectiveness(data: ObjectionData[]) {
  const overcame = data.filter(obj => obj.script_effectiveness === true).length;
  const failed = data.filter(obj => obj.script_effectiveness === false).length;
  const total = overcame + failed;
  
  return {
    overcame_objection: overcame,
    failed_to_overcome: failed,
    effectiveness_rate: total > 0 ? ((overcame / total) * 100).toFixed(1) + '%' : '0%'
  };
}

export function getMostCommonObjection(distribution: Record<string, number>): string {
  return Object.keys(distribution).reduce((a, b) => distribution[a] > distribution[b] ? a : b);
}

export function getCriticalStage(distribution: Record<string, number>): string {
  return Object.keys(distribution).reduce((a, b) => distribution[a] > distribution[b] ? a : b);
}

export function generateObjectionRecommendations(
  categoryDist: Record<string, number>, 
  stageDist: Record<string, number>, 
  effectiveness: any
): string[] {
  const recommendations = [];
  const mostCommon = getMostCommonObjection(categoryDist);
  const criticalStage = getCriticalStage(stageDist);
  
  // Recomenda√ß√µes baseadas na categoria mais comum
  if (mostCommon === 'Pre√ßo') {
    recommendations.push('Desenvolver scripts mais eficazes para obje√ß√µes de pre√ßo');
    recommendations.push('Melhorar apresenta√ß√£o de valor antes da apresenta√ß√£o do pre√ßo');
  } else if (mostCommon === 'Agenda/Tempo') {
    recommendations.push('Treinar t√©cnicas de contorno de obje√ß√µes de agenda');
    recommendations.push('Oferecer mais flexibilidade de hor√°rios');
  } else if (mostCommon === 'Confian√ßa/Medo') {
    recommendations.push('Construir mais confian√ßa atrav√©s de depoimentos e cases');
    recommendations.push('Reduzir riscos percebidos com garantias');
  }
  
  // Recomenda√ß√µes baseadas no est√°gio cr√≠tico
  if (criticalStage === 'P√≥s-Apresenta√ß√£o do Pre√ßo') {
    recommendations.push('Revisar estrat√©gia de apresenta√ß√£o de pre√ßos');
  } else if (criticalStage === 'Na Tentativa de Agendamento') {
    recommendations.push('Melhorar t√©cnicas de fechamento e cria√ß√£o de urg√™ncia');
  }
  
  // Recomenda√ß√£o geral
  recommendations.push('Implementar seguimento estruturado p√≥s-obje√ß√£o');
  
  return recommendations.slice(0, 4); // M√°ximo 4 recomenda√ß√µes
}

export async function generateSimulatedObjections(supabase: any, agentName: string) {
  console.log('üìä Gerando an√°lise simulada de obje√ß√µes para:', agentName);
  
  // Simula√ß√£o baseada em padr√µes comuns de obje√ß√µes
  const simulatedData = {
    objection_analysis: {
      agent_name: agentName,
      total_objections: Math.floor(Math.random() * 50) + 20, // Entre 20-70 obje√ß√µes
      category_distribution: {
        'Pre√ßo': Math.floor(Math.random() * 15) + 5,
        'Agenda/Tempo': Math.floor(Math.random() * 12) + 3,
        'Confian√ßa/Medo': Math.floor(Math.random() * 10) + 2,
        'Necessidade/Urg√™ncia': Math.floor(Math.random() * 8) + 1,
        'Autoridade/Decis√£o': Math.floor(Math.random() * 6) + 1,
        'Localiza√ß√£o': Math.floor(Math.random() * 4) + 1,
        'Outros': Math.floor(Math.random() * 3) + 1
      },
      funnel_stage_distribution: {
        'In√≠cio do Contato': Math.floor(Math.random() * 8) + 2,
        'P√≥s-Apresenta√ß√£o da Solu√ß√£o': Math.floor(Math.random() * 15) + 5,
        'P√≥s-Apresenta√ß√£o do Pre√ßo': Math.floor(Math.random() * 18) + 8,
        'Na Tentativa de Agendamento': Math.floor(Math.random() * 12) + 5
      },
      intensity_analysis: {
        'Baixa': Math.floor(Math.random() * 15) + 5,
        'M√©dia': Math.floor(Math.random() * 20) + 10,
        'Alta': Math.floor(Math.random() * 10) + 3
      },
      conversion_impact: {
        converted_after_objection: Math.floor(Math.random() * 15) + 5,
        not_converted: Math.floor(Math.random() * 25) + 10,
        conversion_rate: '32.5%'
      },
      script_effectiveness: {
        overcame_objection: Math.floor(Math.random() * 20) + 8,
        failed_to_overcome: Math.floor(Math.random() * 15) + 5,
        effectiveness_rate: '68.2%'
      },
      most_common_objection: 'Pre√ßo',
      critical_stage: 'P√≥s-Apresenta√ß√£o do Pre√ßo',
      recommendations: [
        'Desenvolver scripts mais eficazes para obje√ß√µes de pre√ßo',
        'Melhorar apresenta√ß√£o de valor antes da apresenta√ß√£o do pre√ßo',
        'Treinar t√©cnicas de contorno de obje√ß√µes de agenda',
        'Implementar seguimento estruturado p√≥s-obje√ß√£o'
      ]
    }
  };

  return simulatedData;
}
