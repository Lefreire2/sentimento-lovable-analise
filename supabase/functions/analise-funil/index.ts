
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const anthropicApiKey = Deno.env.get('ANTHROPIC_API_KEY');
const openAIApiKey = Deno.env.get('OPENAI_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface FunnelAnalysisData {
  remoteJid: string;
  nome: string;
  data_conversa: string;
  origem?: string;
  mensagens_concatenadas: string;
  sentimento_geral_conversa: string;
  sentimento_usuario: string;
  sentimento_atendente: string;
}

serve(async (req) => {
  console.log('üîç An√°lise de funil - Requisi√ß√£o recebida:', req.method);

  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    console.log('üîç Retornando headers CORS');
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('üîç Processando requisi√ß√£o de an√°lise de funil');
    
    const requestBody = await req.json();
    console.log('üîç Corpo da requisi√ß√£o:', JSON.stringify(requestBody, null, 2));
    
    const { funnelData, provider = 'anthropic' }: { 
      funnelData: FunnelAnalysisData, 
      provider?: string 
    } = requestBody;

    if (!funnelData) {
      console.error('‚ùå Dados do funil n√£o fornecidos');
      return new Response(JSON.stringify({ error: "Dados do funil s√£o obrigat√≥rios." }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    console.log('üîç Iniciando an√°lise de funil para:', funnelData.nome);
    console.log('üîç Provider selecionado:', provider);
    console.log('üîç Anthropic API Key dispon√≠vel:', !!anthropicApiKey);
    console.log('üîç OpenAI API Key dispon√≠vel:', !!openAIApiKey);

    // Se n√£o h√° nenhuma chave de API, retornar an√°lise simulada
    if (!anthropicApiKey && !openAIApiKey) {
      console.log('‚ö†Ô∏è Nenhuma chave de API configurada, retornando an√°lise simulada');
      
      const simulatedAnalysis = `**Lead:** ${funnelData.nome} (ID: ${funnelData.remoteJid})
**√öltima Etapa Alcan√ßada:** Etapa 3 - Levantada de M√£o
**Ponto de Interrup√ß√£o:** Parou ap√≥s demonstrar interesse inicial - n√£o respondeu √† apresenta√ß√£o da oferta
**Justificativa:** Lead mostrou interesse mas n√£o reagiu aos valores apresentados. Sentimento detectado: ${funnelData.sentimento_usuario}
**Reengajamento Poss√≠vel:** Sim
**Sugest√£o:** Recontato em 2-3 dias com abordagem focada em benef√≠cios e n√£o apenas pre√ßos. Considerar oferta personalizada ou desconto.

**An√°lise Detalhada:**
- O lead iniciou a conversa demonstrando interesse genu√≠no
- A secret√°ria respondeu adequadamente na primeira abordagem
- Houve quebra no fluxo ap√≥s apresenta√ß√£o de valores
- Sentimento geral da conversa: ${funnelData.sentimento_geral_conversa}
- Oportunidade de recupera√ß√£o atrav√©s de follow-up estrat√©gico`;

      return new Response(JSON.stringify({ 
        analise_gerada: simulatedAnalysis,
        provider: 'simulado',
        lead_id: funnelData.remoteJid,
        lead_name: funnelData.nome
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const promptTemplate = `Voc√™ √© um analista s√™nior especializado em conversas comerciais via WhatsApp em cl√≠nicas m√©dicas. Receber√° o hist√≥rico de mensagens de um lead com o atendente, e dever√° analisar:

1. At√© qual **etapa do funil conversacional** o lead chegou.
2. Em qual etapa ele **parou ou desistiu**.
3. Se houve falhas do atendente, timing ruim, d√∫vidas n√£o respondidas ou sentimento negativo.
4. Se h√° **potencial de reengajamento** futuro.

---

## üìå Etapas do Funil

1. **Lead Iniciado** ‚Äì O lead enviou a primeira mensagem.
2. **Lead Respondido** ‚Äì A secret√°ria respondeu o lead.
3. **Levantada de M√£o** ‚Äì O lead demonstrou interesse claro ("quero agendar", "valores", etc.).
4. **Apresenta√ß√£o de Oferta** ‚Äì A secret√°ria apresentou valor, datas ou detalhes da consulta.
5. **Confirma√ß√£o do Lead** ‚Äì O lead confirmou ou mostrou aceita√ß√£o direta.
6. **Agendamento Confirmado** ‚Äì A secret√°ria registrou o agendamento com data/hora.

---

## üìÑ Dados recebidos:

- **ID do Lead:** ${funnelData.remoteJid}  
- **Nome do Lead:** ${funnelData.nome}  
- **Data da conversa:** ${funnelData.data_conversa}  
- **Origem do lead:** ${funnelData.origem}  
- **Mensagens:** ${funnelData.mensagens_concatenadas}  
- **Sentimento geral da conversa:** ${funnelData.sentimento_geral_conversa}  
- **Sentimento do usu√°rio:** ${funnelData.sentimento_usuario}  
- **Sentimento do atendente:** ${funnelData.sentimento_atendente}

---

## ‚úçÔ∏è Sua tarefa:

Analise as mensagens e:

1. Liste a √∫ltima etapa do funil que o lead atingiu.
2. Informe claramente onde o lead parou (e por qu√™).
3. Descreva se foi uma falha t√©cnica, de abordagem ou tempo de resposta.
4. Diga se o lead ainda pode ser reengajado com abordagem diferente.
5. Indique a√ß√µes recomendadas para evitar esse tipo de abandono no futuro.

---

### üß† Formato da resposta

**Lead:** ${funnelData.nome} (ID: ${funnelData.remoteJid})  
**√öltima Etapa Alcan√ßada:** [Etapa 1 a 6]  
**Ponto de Interrup√ß√£o:** [ex: Parou ap√≥s receber valores ‚Äì n√£o respondeu mais]  
**Justificativa:** [comportamento do lead, emo√ß√£o detectada, falha da secret√°ria]  
**Reengajamento Poss√≠vel:** [Sim/N√£o]  
**Sugest√£o:** [ex: recontato em 3 dias com abordagem personalizada por obje√ß√£o]`;

    let analiseGerada;

    if (provider === 'anthropic' && anthropicApiKey) {
      console.log('ü§ñ Usando Anthropic Claude para an√°lise de funil');
      
      try {
        const response = await fetch('https://api.anthropic.com/v1/messages', {
          method: 'POST',
          headers: {
            'x-api-key': anthropicApiKey,
            'Content-Type': 'application/json',
            'anthropic-version': '2023-06-01',
          },
          body: JSON.stringify({
            model: 'claude-3-5-sonnet-20241022',
            max_tokens: 4000,
            temperature: 0.7,
            messages: [
              {
                role: 'user',
                content: promptTemplate
              }
            ]
          }),
        });

        if (!response.ok) {
          const errorData = await response.json();
          console.error('‚ùå Erro da API Anthropic:', errorData);
          throw new Error(errorData.error?.message || 'Falha na an√°lise com Anthropic');
        }

        const data = await response.json();
        analiseGerada = data.content[0].text;
        console.log('‚úÖ An√°lise Anthropic conclu√≠da');

      } catch (error) {
        console.error('‚ùå Erro na chamada Anthropic:', error);
        throw error;
      }

    } else if (openAIApiKey) {
      console.log('ü§ñ Usando OpenAI GPT para an√°lise de funil');
      
      try {
        const response = await fetch('https://api.openai.com/v1/chat/completions', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${openAIApiKey}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            model: 'gpt-4o-mini',
            messages: [
              { role: 'user', content: promptTemplate }
            ],
            temperature: 0.7,
            max_tokens: 4000,
          }),
        });

        if (!response.ok) {
          const errorData = await response.json();
          console.error('‚ùå Erro da API OpenAI:', errorData);
          throw new Error(errorData.error?.message || 'Falha na an√°lise com OpenAI');
        }

        const data = await response.json();
        analiseGerada = data.choices[0].message.content;
        console.log('‚úÖ An√°lise OpenAI conclu√≠da');

      } catch (error) {
        console.error('‚ùå Erro na chamada OpenAI:', error);
        throw error;
      }

    } else {
      console.error('‚ùå Nenhuma chave de API v√°lida encontrada');
      return new Response(JSON.stringify({ 
        error: "Nenhuma chave de API configurada. Configure ANTHROPIC_API_KEY ou OPENAI_API_KEY." 
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    console.log('‚úÖ An√°lise de funil conclu√≠da com sucesso');

    return new Response(JSON.stringify({ 
      analise_gerada: analiseGerada,
      provider: anthropicApiKey ? 'anthropic' : 'openai',
      lead_id: funnelData.remoteJid,
      lead_name: funnelData.nome
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('üí• Erro na fun√ß√£o de an√°lise de funil:', error);
    return new Response(JSON.stringify({ 
      error: `Erro na an√°lise: ${error.message}` 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
