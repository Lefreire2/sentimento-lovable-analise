
import { useQuery } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { getMetricsTableName, getBasicTableName, debugAndreAraujo } from "@/lib/agents";

interface PerformanceMetricsData {
    conversao_indicada_mvp: string;
    pontuacao_aderencia_percentual: string;
    numero_perguntas_vendedor: string;
    taxa_mensagens_vendedor_percentual: string;
}

const calculatePerformanceFromBasic = (messages: any[]): PerformanceMetricsData => {
    console.log('‚ö° PERFORMANCE - Calculando performance com dados b√°sicos:', messages.length);
    
    if (messages.length === 0) {
        return {
            conversao_indicada_mvp: 'N√£o',
            pontuacao_aderencia_percentual: '0',
            numero_perguntas_vendedor: '0',
            taxa_mensagens_vendedor_percentual: '0'
        };
    }

    // An√°lise baseada no n√∫mero de mensagens e engajamento
    const totalMessages = messages.length;
    const estimatedConversion = totalMessages > 15 ? 'Sim' : 'N√£o';
    const aderencia = Math.min(85, Math.floor(totalMessages * 3.5));
    const perguntas = Math.floor(totalMessages * 0.3);
    const taxaMensagens = Math.min(100, Math.floor(totalMessages * 2.5));
    
    return {
        conversao_indicada_mvp: estimatedConversion,
        pontuacao_aderencia_percentual: aderencia.toString(),
        numero_perguntas_vendedor: perguntas.toString(),
        taxa_mensagens_vendedor_percentual: taxaMensagens.toString()
    };
};

export const usePerformanceMetrics = (selectedAgent: string) => {
    return useQuery<PerformanceMetricsData>({
        queryKey: ['performanceMetrics', selectedAgent],
        queryFn: async () => {
            if (!selectedAgent) {
                console.log('‚ùå PERFORMANCE - Nenhum agente selecionado');
                return {
                    conversao_indicada_mvp: 'N√£o',
                    pontuacao_aderencia_percentual: '0',
                    numero_perguntas_vendedor: '0',
                    taxa_mensagens_vendedor_percentual: '0'
                };
            }
            
            console.log('üîç PERFORMANCE - Buscando m√©tricas de performance para:', selectedAgent);
            
            // Debug espec√≠fico para Andr√© Ara√∫jo
            if (selectedAgent === 'Andr√© Ara√∫jo') {
                console.log('üêõ PERFORMANCE - Executando debug para Andr√© Ara√∫jo');
                debugAndreAraujo();
            }
            
            // Tentar tabela de m√©tricas primeiro
            const metricsTableName = getMetricsTableName(selectedAgent);
            console.log('üìä PERFORMANCE - Tentando tabela de m√©tricas:', metricsTableName);
            
            if (metricsTableName) {
                try {
                    console.log('üîÑ PERFORMANCE - Executando query na tabela de m√©tricas:', metricsTableName);
                    const { data: metricsData, error: metricsError } = await supabase
                        .from(metricsTableName as any)
                        .select('conversao_indicada_mvp, pontuacao_aderencia_percentual, numero_perguntas_vendedor, taxa_mensagens_vendedor_percentual')
                        .limit(1);
                    
                    console.log('üìä PERFORMANCE - Resultado da query de m√©tricas:');
                    console.log('- Erro:', metricsError);
                    console.log('- Dados:', metricsData);
                    console.log('- Quantidade de registros:', metricsData?.length || 0);
                    
                    if (!metricsError && metricsData && metricsData.length > 0) {
                        console.log('‚úÖ PERFORMANCE - Usando dados de m√©tricas');
                        console.log('üìã PERFORMANCE - Primeiro registro:', metricsData[0]);
                        const firstRow = metricsData[0] as any;
                        return {
                            conversao_indicada_mvp: firstRow.conversao_indicada_mvp || 'N√£o',
                            pontuacao_aderencia_percentual: firstRow.pontuacao_aderencia_percentual || '0',
                            numero_perguntas_vendedor: firstRow.numero_perguntas_vendedor || '0',
                            taxa_mensagens_vendedor_percentual: firstRow.taxa_mensagens_vendedor_percentual || '0'
                        };
                    } else if (metricsError) {
                        console.log('‚ö†Ô∏è PERFORMANCE - Erro na tabela de m√©tricas:', metricsError.message);
                        console.log('üîç PERFORMANCE - Detalhes do erro:', metricsError);
                    } else {
                        console.log('‚ö†Ô∏è PERFORMANCE - Tabela de m√©tricas est√° vazia');
                    }
                } catch (err) {
                    console.error('üí• PERFORMANCE - Erro ao buscar m√©tricas:', err);
                }
            } else {
                console.log('‚ùå PERFORMANCE - Nenhuma tabela de m√©tricas encontrada para:', selectedAgent);
            }
            
            // Fallback para tabela b√°sica
            const basicTableName = getBasicTableName(selectedAgent);
            console.log('üí¨ PERFORMANCE - Tentando tabela b√°sica:', basicTableName);
            
            if (basicTableName) {
                try {
                    console.log('üîÑ PERFORMANCE - Executando query na tabela b√°sica:', basicTableName);
                    const { data: basicData, error: basicError } = await supabase
                        .from(basicTableName as any)
                        .select('*')
                        .limit(100);
                    
                    console.log('üí¨ PERFORMANCE - Resultado da query b√°sica:');
                    console.log('- Erro:', basicError);
                    console.log('- Quantidade de registros:', basicData?.length || 0);
                    
                    if (!basicError && basicData && basicData.length > 0) {
                        console.log('‚úÖ PERFORMANCE - Usando dados b√°sicos');
                        console.log('üìã PERFORMANCE - Amostra dos dados b√°sicos:', basicData.slice(0, 2));
                        return calculatePerformanceFromBasic(basicData);
                    } else if (basicError) {
                        console.log('‚ö†Ô∏è PERFORMANCE - Erro na tabela b√°sica:', basicError.message);
                        console.log('üîç PERFORMANCE - Detalhes do erro:', basicError);
                    } else {
                        console.log('‚ö†Ô∏è PERFORMANCE - Tabela b√°sica est√° vazia');
                    }
                } catch (err) {
                    console.error('üí• PERFORMANCE - Erro ao buscar dados b√°sicos:', err);
                }
            } else {
                console.log('‚ùå PERFORMANCE - Nenhuma tabela b√°sica encontrada para:', selectedAgent);
            }
            
            console.log('‚ö†Ô∏è PERFORMANCE - Retornando dados zerados para:', selectedAgent);
            return {
                conversao_indicada_mvp: 'N√£o',
                pontuacao_aderencia_percentual: '0',
                numero_perguntas_vendedor: '0',
                taxa_mensagens_vendedor_percentual: '0'
            };
        },
        enabled: !!selectedAgent,
        retry: 2,
        refetchOnWindowFocus: false,
        staleTime: 5 * 60 * 1000,
        gcTime: 5 * 60 * 1000,
    });
};
