
import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Loader2, Brain, Zap } from "lucide-react";
import { supabase } from "@/integrations/supabase/client";
import { formatAgentName } from "@/lib/agents";

interface AgentData {
    tempo_primeira_resposta_minutos: string;
    tempo_medio_resposta_atendente_minutos: string;
    tempo_maximo_resposta_atendente_minutos: string;
    sentimento_usuario: string;
    sentimento_atendente: string;
    sentimento_geral_conversa: string;
    duracao_total_conversa_minutos: string;
    conversao_indicada_mvp: string;
    pontuacao_aderencia_percentual: string;
    numero_perguntas_vendedor: string;
    ader√™ncia_script_nivel: string;
    termo_chave_conversao: string;
}

interface AIAnalysisSectionProps {
    agentData: AgentData;
    selectedAgent: string;
}

export const AIAnalysisSection = ({ agentData, selectedAgent }: AIAnalysisSectionProps) => {
    const [analysis, setAnalysis] = useState<string>("");
    const [isAnalyzing, setIsAnalyzing] = useState(false);
    const [aiProvider, setAIProvider] = useState<string>('');

    const handleGenerateAnalysis = async () => {
        if (!agentData) return;

        setIsAnalyzing(true);
        setAnalysis('');
        setAIProvider('');

        const promptTemplate = `Voc√™ √© um analista s√™nior especializado em atendimento via WhatsApp em cl√≠nicas m√©dicas. Receber√° os dados de uma conversa com um lead e dever√° fazer uma an√°lise completa, respondendo com clareza e foco em melhoria cont√≠nua.

DADOS DA CONVERSA:
- Atendente: {{nome}}
- Sentimento Geral: {{sentimento_geral_conversa}}
- Sentimento do Atendente: {{sentimento_atendente}}
- Sentimento do Usu√°rio: {{sentimento_usuario}}
- Tempo M√©dio de Resposta: {{tempo_medio_resposta}} minutos
- Tempo Primeira Resposta: {{tempo_primeira_resposta}} minutos
- Tempo M√°ximo de Resposta: {{tempo_maximo_resposta}} minutos
- Dura√ß√£o Total: {{duracao_total}} minutos
- Ader√™ncia ao Script: {{ader√™ncia_script_nivel}} ({{pontuacao_aderencia_script}}%)
- Convers√£o Identificada: {{conversao_indicada_sim_nao}}
- N√∫mero de Perguntas do Vendedor: {{numero_perguntas}}
- Termos-chave: {{termo_chave_conversao}}

AVALIE CRITICAMENTE:

1. **QUALIDADE EMOCIONAL** (0-10):
   - Empatia e acolhimento demonstrados
   - Consist√™ncia do tom durante a conversa
   - Gest√£o adequada das emo√ß√µes do lead

2. **PERFORMANCE T√âCNICA** (0-10):
   - Ader√™ncia ao script e protocolo
   - Qualidade das perguntas de qualifica√ß√£o
   - Tempo de resposta e agilidade

3. **POTENCIAL DE CONVERS√ÉO** (0-10):
   - Identifica√ß√£o correta de interesse
   - Condu√ß√£o adequada para fechamento
   - Supera√ß√£o de obje√ß√µes

4. **PROBLEMAS IDENTIFICADOS**:
   - Pontos espec√≠ficos de melhoria
   - Oportunidades perdidas
   - Comportamentos inadequados

Responda no seguinte formato EXATO:

---

### üìä AN√ÅLISE: {{nome}}

**üéØ RESUMO EXECUTIVO**
Sentimento: {{sentimento_geral_conversa}} | Tempo M√©dio: {{tempo_medio_resposta}}min | Ader√™ncia: {{pontuacao_aderencia_script}}% | Convers√£o: {{conversao_indicada_sim_nao}}

---

### ‚úÖ PONTOS FORTES
‚Ä¢ [Listar 3-4 pontos espec√≠ficos bem executados]

### ‚ö†Ô∏è OPORTUNIDADES DE MELHORIA
‚Ä¢ [Listar 3-4 pontos espec√≠ficos para melhorar]

### üìà NOTAS POR CATEGORIA
‚Ä¢ **Qualidade Emocional:** X.X/10
‚Ä¢ **Performance T√©cnica:** X.X/10  
‚Ä¢ **Potencial de Convers√£o:** X.X/10

### üéØ NOTA GERAL: X.X/10

### üí° A√á√ïES RECOMENDADAS
1. [A√ß√£o espec√≠fica e pr√°tica]
2. [A√ß√£o espec√≠fica e pr√°tica]
3. [A√ß√£o espec√≠fica e pr√°tica]

---
*An√°lise gerada por IA para melhoria cont√≠nua*`;

        const prompt = promptTemplate
            .replace(/{{nome}}/g, formatAgentName(selectedAgent))
            .replace('{{sentimento_geral_conversa}}', agentData.sentimento_geral_conversa || 'N/A')
            .replace('{{sentimento_atendente}}', agentData.sentimento_atendente || 'N/A')
            .replace('{{sentimento_usuario}}', agentData.sentimento_usuario || 'N/A')
            .replace('{{tempo_medio_resposta}}', parseFloat(agentData.tempo_medio_resposta_atendente_minutos || '0').toFixed(1))
            .replace('{{tempo_primeira_resposta}}', parseFloat(agentData.tempo_primeira_resposta_minutos || '0').toFixed(1))
            .replace('{{tempo_maximo_resposta}}', parseFloat(agentData.tempo_maximo_resposta_atendente_minutos || '0').toFixed(1))
            .replace('{{duracao_total}}', parseFloat(agentData.duracao_total_conversa_minutos || '0').toFixed(1))
            .replace('{{ader√™ncia_script_nivel}}', agentData.ader√™ncia_script_nivel || 'N/A')
            .replace('{{pontuacao_aderencia_script}}', parseFloat(agentData.pontuacao_aderencia_percentual || '0').toFixed(1))
            .replace('{{conversao_indicada_sim_nao}}', agentData.conversao_indicada_mvp || 'N/A')
            .replace('{{numero_perguntas}}', agentData.numero_perguntas_vendedor || '0')
            .replace('{{termo_chave_conversao}}', agentData.termo_chave_conversao || 'N/A');

        try {
            const { data, error: invokeError } = await supabase.functions.invoke('generate-analysis', {
                body: { 
                    prompt,
                    provider: 'anthropic'
                },
            });

            if (invokeError) {
                throw new Error(`A invoca√ß√£o da fun√ß√£o falhou: ${invokeError.message}`);
            }

            if (data.error) {
                throw new Error(`A gera√ß√£o da an√°lise falhou: ${data.error}`);
            }

            setAnalysis(data.generatedText);
            setAIProvider(data.provider || 'unknown');
        } catch (e: any) {
            console.error('Error generating analysis:', e);
            setAnalysis(`Ocorreu um erro ao gerar a an√°lise: ${e.message}`);
        } finally {
            setIsAnalyzing(false);
        }
    };

    return (
        <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0">
                <div className="flex items-center space-x-2">
                    <Brain className="h-5 w-5 text-primary" />
                    <CardTitle>An√°lise Inteligente de Performance</CardTitle>
                    {aiProvider && (
                        <Badge variant="secondary" className="ml-2">
                            {aiProvider === 'anthropic' ? (
                                <><Brain className="h-3 w-3 mr-1" /> Claude</>
                            ) : (
                                <><Zap className="h-3 w-3 mr-1" /> GPT</>
                            )}
                        </Badge>
                    )}
                </div>
                <Button onClick={handleGenerateAnalysis} disabled={isAnalyzing}>
                    {isAnalyzing && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                    <Brain className="mr-2 h-4 w-4" />
                    Gerar An√°lise IA
                </Button>
            </CardHeader>
            {isAnalyzing && (
                <CardContent>
                    <div className="flex flex-col items-center justify-center gap-2 text-center p-8">
                        <Brain className="h-8 w-8 animate-pulse text-primary" />
                        <p className="text-muted-foreground font-medium">IA analisando performance...</p>
                        <p className="text-sm text-muted-foreground">Processando dados e gerando insights personalizados</p>
                    </div>
                </CardContent>
            )}
            {analysis && !isAnalyzing && (
                <CardContent>
                    <div className="prose prose-sm dark:prose-invert max-w-none rounded-md border p-6 bg-gradient-to-br from-muted/20 to-muted/5">
                        <pre className="whitespace-pre-wrap font-sans text-sm bg-transparent border-0 p-0 leading-relaxed">{analysis}</pre>
                    </div>
                </CardContent>
            )}
        </Card>
    );
};
